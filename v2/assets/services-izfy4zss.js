import{aj as L,r as S,ak as s,al as i,W as c}from"./index-XtiBO-PZ.js";const j=L("Services",()=>{const d=S({}),f=S({}),o=S([]),O=S(null),R=S(null),E=S(null);async function h(){if(!(Object.keys(d.value).length>0))try{const e=await s.post(i.services);e?.data?d.value=e.data:d.value={}}catch(e){console.error("Ошибка при загрузке сервисов:",e),d.value={}}}async function P(){await s.post(i.DNSmanagerOrders).then(e=>{O.value=e.data})}async function k(){await s.post(i.ExtraIPOrders).then(e=>{R.value=e.data})}async function y(){await s.post(i.ISPswOrders).then(e=>{E.value=e.data})}async function v(e){let t="ERROR",a=null,r=null,l=null,{Code:n="Default"}=e;return n==="Default"?l=i.ServiceOrder:l="/API/"+n+"Order",await s.post(c+l,e).then(u=>{u?.data?.Status==="Ok"?(t="SUCCESS",r=u?.data):a=u?.data?.Exception}),{result:t,info:r,error:a}}async function w(e){let t="ERROR",a=null,r=null,l=null,{Code:n="Default"}=e;return n==="Default"?l="/API/DNSmanagerOrder":l="/API/"+n+"Order",await s.post(c+l,e).then(u=>{u?.data?.Status==="Ok"?(t="SUCCESS",r=u?.data):a=u?.data?.Exception}),{result:t,info:r,error:a}}async function C(e){let t="ERROR",a=null,r=null,l=null,{Code:n="Default"}=e;return n==="Default"?l=i.ExtraIPOrder:l="/API/"+n+"Order",await s.post(c+l,e).then(u=>{u?.data?.Status==="Ok"?(t="SUCCESS",r=u?.data):a=u?.data?.Exception}),{result:t,info:r,error:a}}async function I(e){let t="ERROR",a=null,r=null,l=null,{Code:n="Default"}=e;return n==="Default"?l=i.ISPswOrder:l="/API/"+n+"Order",await s.post(c+l,e).then(u=>{u?.data?.Status==="Ok"?(t="SUCCESS",r=u?.data):a=u?.data?.Exception}),{result:t,info:r,error:a}}async function D(e){let t="ERROR";return await s.post(i.ExtraIPOrderPay,e).then(a=>{a?.data?.Status==="UseBasket"&&(t="UseBasket"),a?.data?.Status==="NoBasket"&&(t="NoBasket"),a?.data?.Status==="Ok"&&(t="NoBasket")}),t}async function U(e){let t="ERROR";return await s.post(i.ISPswOrderPay,e).then(a=>{a?.data?.Status==="UseBasket"&&(t="UseBasket"),a?.data?.Status==="NoBasket"&&(t="NoBasket"),a?.data?.Status==="Ok"&&(t="NoBasket")}),t}async function B(e){let t="ERROR";return await s.post(i.DNSOrderPay,e).then(a=>{a?.data?.Status==="UseBasket"&&(t="UseBasket"),a?.data?.Status==="NoBasket"&&(t="NoBasket"),a?.data?.Status==="Ok"&&(t="NoBasket")}),t}async function N(e="Default",t){let a="ERROR",r=null,l=null;return e==="Default"?l=i.ServiceOrderPay:l="/"+e+"OrderPay",await s.post(c+l,t).then(n=>{n?.data?.Status==="Ok"?a="SUCCESS":n?.data?.Status==="UseBasket"?a="BASKET":r=n?.data?.Exception}),{result:a,error:r}}async function m(e){let t="ERROR",a=null;return await s.post(c+"/API/v2/"+e+"Schemes",{}).then(r=>{r?.data?(t="SUCCESS",f.value[e]=r?.data):a=r?.data?.Exception}),{result:t,error:a}}async function x(e){let t="ERROR",a=null;return await s.post(i.DNSmanagerOrderSchemeChange,e).then(r=>{r?.data?.Status==="Ok"&&(t="SUCCESS")}),{result:t,error:a}}async function g(e){let t="ERROR",a=null;return await s.post(i.ISPswOrderSchemeChange,e).then(r=>{r?.data?.Status==="Ok"&&(t="SUCCESS")}),{result:t,error:a}}async function p(e){try{const t=await s.post(i.DependServices,e);return t?.data?(o.value=t.data,{result:"SUCCESS",error:null}):(o.value=[],{result:"ERROR",error:t?.data?.Exception})}catch(t){return console.error("Ошибка при загрузке зависимых сервисов:",t),o.value=[],{result:"ERROR",error:t.message}}}return{ServicesList:d,additionalServicesScheme:f,DependServicesList:o,fetchAdditionalServiceScheme:m,fetchDependServices:p,ServiceOrderPay:N,fetchServices:h,ServiceOrder:v,DNSmanagerOrder:w,ISPswOrder:I,ExtraIPOrder:C,fetchDNSmanagerOrders:P,DNSmanagerOrdersList:O,DNSmanagerOrderSchemeChange:x,ISPswOrdersList:E,fetchISPswOrders:y,ISPswOrderSchemeChange:g,ISPswOrderPay:U,DNSOrderPay:B,fetchExtraIPOrders:k,ExtraIPOrdersList:R,ExtraIPOrderPay:D}});export{j as u};
