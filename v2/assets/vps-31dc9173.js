import{s as C,r as V,a1 as u,a2 as i}from"./index-aeb1df1e.js";const v=C("vps",()=>{const h=V({}),P=V(null);async function r(){try{const t=await u.post(i.fetchVPS);t!=null&&t.data?h.value=t.data:h.value={}}catch(t){console.error("Ошибка при загрузке VPS:",t),h.value={}}}async function O(){await u.post(i.fetchVPSSchemes).then(t=>{P.value=t.data})}async function R(t){let c="ERROR",l=null,a=null;return await u.post(i.VPSOrder,t).then(S=>{var f,d;((f=S==null?void 0:S.data)==null?void 0:f.Status)==="Ok"?(c="SUCCESS",a=S==null?void 0:S.data):l=(d=S==null?void 0:S.data)==null?void 0:d.Exception}),{result:c,info:a,error:l}}async function n(t){let c="ERROR",l=null;return await u.post(i.VPSOrderPay,t).then(a=>{var S,f,d;((S=a==null?void 0:a.data)==null?void 0:S.Status)==="Ok"?c="SUCCESS":((f=a==null?void 0:a.data)==null?void 0:f.Status)==="UseBasket"?c="BASKET":l=(d=a==null?void 0:a.data)==null?void 0:d.Exception}),{result:c,error:l}}async function y(t){let c="ERROR",l=null;return await u.post(i.VPSOrderSchemeChange,t).then(a=>{var S;((S=a==null?void 0:a.data)==null?void 0:S.Status)==="Ok"&&(c="SUCCESS")}),{result:c,error:l}}async function E(t){await u.post(i.VPSReboot,t)}return{vpsList:h,vpsSchemes:P,fetchVPS:r,fetchVPSSchemes:O,VPSOrderPay:n,VPSReboot:E,VPSOrder:R,VPSOrderSchemeChange:y}});export{v as u};
