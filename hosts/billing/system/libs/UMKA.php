<?php

#-------------------------------------------------------------------------------
// основано на https://github.com/akunich/umka-api-php-example
// допилено Alex Keda, for www.host-food.ru
/******************************************************************************/
/******************************************************************************/

class umkaApiModel {
	#-------------------------------------------------------------------------------
	// url кассы
	public $Cpp		= 'http://serge-home.keenetic.pro:8088/';
	// логин и пароль кассира (по-умолчанию в умке логины от 1 до 99, пароль совпадает с логином). Юзер 99 - администратор
	public $Login		= '1';
	// Особенность. При смене паролей выяснилось, что умка принимает только цифровые пароли не более 8 символов
	public $Password	= '1';
	// налогообложение
	public $TaxationSystem	= 'SIMPLIFIED_IN_OUT';
	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	// 0 - каcса не отвечает, 1 - отвечает. смена закрыта, 2 - отвечает и смена открыта
	private $kktStatus	= 0;
	private $kktStatusDetail;
	private $Summ		= 0;
	// надо ли реально печатать чеки
	private $Print		= 0;
	// используется при формировании sessionid. У каждого магазина должен быть уникальнм от нуля до 9999, для разработки используем id > 9000
	private $ShopId		= 1;
	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	//конструктор выполнится при инициализации
	public function __construct($Cpp,$Login,$Password,$TaxationSystem) {
		$this->Cpp		= $Cpp;
		$this->Login		= $Login;
		$this->Password		= $Password;
		$this->TaxationSystem	= $TaxationSystem;
	}

	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	public function init(){
		#-------------------------------------------------------------------------------
		$Status = $this->getKktStatus();
		#-------------------------------------------------------------------------------
		if($Status == 1) $this->cycleOpen();
		#-------------------------------------------------------------------------------
	}

	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	private function getKktStatus(){
		#-------------------------------------------------------------------------------
		$Status = $this->cashboxStatus(); 
		#-------------------------------------------------------------------------------
		if(Is_Array($Status)){
			#-------------------------------------------------------------------------------
			$this->kktStatusDetail = $Status;
			#-------------------------------------------------------------------------------
			if(IsSet($Status['cashboxStatus']['fsStatus']['cycleIsOpen']) && $Status['cashboxStatus']['fsStatus']['cycleIsOpen'] == 1){
				$Result = 2;
			}else{
				$Result = 1;
			}
			#-------------------------------------------------------------------------------
		}else{
			#-------------------------------------------------------------------------------
			$Result = 0;
		}
      		#-------------------------------------------------------------------------------
		$this->kktStatus = $Result;
		#-------------------------------------------------------------------------------
		return $Result;
		#-------------------------------------------------------------------------------
	}

	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	private function cashboxStatus(){
		return $this->API('/cashboxStatus.json');
	}

	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	private function cycleOpen() {
		return $this->API(SPrintF('/cycleopen.json?print=%u',$this->Print));
	}


	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	// а нету вызовов этой функции
	function cycleClose() {
		return $this->API(SPrintF('/cycleclose.json?print=%u',$this->Print));
	}

	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	function makeSessionId($checkNumber) {
		return str_pad($this->shopId, 4, '0', STR_PAD_LEFT).str_pad($checkNumber, 16, '0', STR_PAD_LEFT);
	}

	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	function makeSessionIdCancel($checkNumber) {
		return str_pad($this->shopId, 4, '0', STR_PAD_LEFT).'5'.str_pad($checkNumber, 15, '0', STR_PAD_LEFT);
	}

	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	// а нету вызовов этой функции
	function makeSessionIdCorrect($checkNumber) {
		return str_pad($this->shopId, 4, '0', STR_PAD_LEFT).'7'.str_pad($checkNumber, 15, '0', STR_PAD_LEFT);
	}

	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	function makeFiscProp($Data,$Tag = FALSE){
		#-------------------------------------------------------------------------------
		foreach ($Data as $Item) $Result['fiscprops'][] = $Item;
			if($Tag)
				$Result['tag'] = $Tag;
		#-------------------------------------------------------------------------------
		return $Result;
		#-------------------------------------------------------------------------------
	}
 
	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	// перечисление позиций в чеке
	private function makeFiscPropPosition($Position){
		// признак способа расчёта 
	 	// 1 - Полная предварительная оплата до момента передачи предмета расчета «ПРЕДОПЛАТА 100%»
	 	// 2 - Частичная предварительная оплата до момента передачи предмета расчета «ПРЕДОПЛАТА»
	 	// 3 - аванс «АВАНС»
	 	// 4 - Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета «ПОЛНЫЙ РАСЧЕТ»
	 	// есть ещё 5, 6, 7 (см. таблицу 28 в спецификации ФФД)
		$Data[] = Array('tag'=>1214,'value'=>1);
 		#-------------------------------------------------------------------------------
		// признак предмета расчёта 
 		// 1 - товар, 3 - работа, 4 - услуга (таблица 29)
		$Data[] = Array('tag'=>1212,'value'=>4);
		#-------------------------------------------------------------------------------
		// наименование предмета расчета (текст. до 128 символов)
		$Data[] = Array('tag' => 1030, 'value' => $Position['Comment']);
		#-------------------------------------------------------------------------------
		// цена за единицу предмета расчета с учетом скидок и наценок
		// Передавать обязательно. В копейках
		$summPos = Ceil(($Position['Summ']/$Position['Amount'])*100);
		$Data[] = Array('tag'=>1079,'value'=>$summPos);
		#-------------------------------------------------------------------------------
		// количество предмета расчета
		// Передавать обязательно. Строкой с 3 знаками после запятой.
		$Data[] = Array('tag'=>1023,'value'=>Number_Format($Position['Amount'], 3, '.',''));
		#-------------------------------------------------------------------------------
		// ставка НДС  ( таблица 24) 
		$TaxationSystems = Array('COMMON'=>1,'SIMPLIFIED_IN'=>6,'SIMPLIFIED_IN_OUT'=>6,'UTOII'=>6,'PATENT'=>6);
		// 1 - «НДС 18%», 2 - «НДС 10%», 3 - «НДС 18/118», 4 - «НДС 10/110», 5 - «НДС 0%», 6 - НДС не облагается
		$Data[] = Array('tag'=>1199,'value'=>$TaxationSystems[$this->TaxationSystem]);
		#-------------------------------------------------------------------------------
		// единица измерения предмета расчета (текст , до 16 символов)
		$Data[] = Array('tag' => 1197, 'value' => $Position['Measure']);
		#-------------------------------------------------------------------------------
		// тег признака "Предмет расчёта" - 1059
		$Result = $this->makeFiscProp($Data, 1059);
		#-------------------------------------------------------------------------------
		$this->Summ = $this->Summ + ($summPos*$Position['Amount']);
		#-------------------------------------------------------------------------------
		#-------------------------------------------------------------------------------
		return $Result;
		#-------------------------------------------------------------------------------
		#-------------------------------------------------------------------------------
	}

	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	function fiscalcheck($Invoice,$Positions,$moneyType = 2){
		#-------------------------------------------------------------------------------
		$this->Summ = 0;
		#-------------------------------------------------------------------------------
		$sessionId = $this->makeSessionId($Invoice['ID']);
		#-------------------------------------------------------------------------------
		// Уникальное ИД сессии (генерируется самостоятельно и должно быть уникальным для каждого чека)
		$Query['document']['sessionId'] = $sessionId;
		#-------------------------------------------------------------------------------
		// Флаг необходимости печати чека
		$Query['document']['print'] = $this->Print;
		#-------------------------------------------------------------------------------
		$Query['document']['data']['docName'] = 'Бланк строгой отчетности';
		#-------------------------------------------------------------------------------
		// Тип документа (1. Продажа, 2.Возврат продажи, 4. Покупка, 5. Возврат покупки, 7. Коррекция прихода, 9. Коррекция расхода)
		$Query['document']['data']['type'] = 1;
		#-------------------------------------------------------------------------------
		// ТИП ОПЛАТЫ (1. Наличным, 2. Электронными, 3. Предоплата, 4. Постоплата, 5. Встречное предоставление)
		$Query['document']['data']['moneyType'] = 2;
		#-------------------------------------------------------------------------------
		// Сумма закрытия чека (может быть 0, если без сдачи) в копейках
		$Query['document']['data']['sum'] = $Invoice['Summ']*100;
		#-------------------------------------------------------------------------------
		$Query['document']['result'] = 0;
		#-------------------------------------------------------------------------------
		// применяемая система налогообложения (применяется битовое значение) См. (номер бита - значение)
		$TaxationSystems = Array('COMMON'=>1,'SIMPLIFIED_IN'=>1,'SIMPLIFIED_IN_OUT'=>2,'UTOII'=>3,'PATENT'=>5);
		// (0 - 1) - ОСН, (1 - 2) - УСН доход, (2 - 4) - УСН доход - расход, (3 - 8) - ЕНВД, (4 - 16) - ЕСН, (5 - 32) - Патент
		$Query['document']['data']['fiscprops'][] = Array('tag'=>1055,'value'=>$TaxationSystems[$this->TaxationSystem]);
		#-------------------------------------------------------------------------------
		// признак расчета. 1 - <ПРИХОД>, 3 - <РАСХОД>, 2 - <ВОЗВРАТ ПРИХОДА>, 4 - <ВОЗВРАТ РАСХОДА>
		$Query['document']['data']['fiscprops'][] = Array('tag'=>1054,'value'=>1);
		#-------------------------------------------------------------------------------
		// телефон или электронный адрес покупателя
		$Query['document']['data']['fiscprops'][] = Array('tag'=>1008,'value'=>$Invoice['Email']);
		#-------------------------------------------------------------------------------
		// адрес сайта ФНС
		$Query['document']['data']['fiscprops'][] = Array('tag' => 1060, 'value' => $this->kktStatusDetail['cashboxStatus']['fnsSite']);
		#-------------------------------------------------------------------------------
		// наименование дополнительного реквизита пользователя
		//$Data[] = Array('tag' => 1085, 'value' => 'Служба поддержки');
		// значение дополнительного реквизита пользователя
		//$Data[] = Array('tag' => 1086, 'value' => '8 800 ........');
		#-------------------------------------------------------------------------------
		// упаковка фискального свойства с тегом 
		// дополнительный реквизит пользователя (тег 1084)
		$Query['document']['data']['fiscprops'][] = $this->makeFiscProp($Data, 1084);
		#-------------------------------------------------------------------------------
		unset($Data);
		#-------------------------------------------------------------------------------
		foreach($Positions as $Position)
			$Query['document']['data']['fiscprops'][] = $this->makeFiscPropPosition($Position);
		#-------------------------------------------------------------------------------
		// проверка, что подсчитанная сумма не превышает реальную более чем на 10%
		if($this->Summ <= ($Query['document']['data']['sum']*1.1))
			$Query['document']['data']['sum'] = $this->Summ;
		#-------------------------------------------------------------------------------
		$Query = Json_Encode($Query, JSON_UNESCAPED_UNICODE);
		#-------------------------------------------------------------------------------
		$Answer = $this->API('/fiscalcheck.json', $Query);
		#-------------------------------------------------------------------------------
		#-------------------------------------------------------------------------------
		return $Answer;
		#-------------------------------------------------------------------------------
		#-------------------------------------------------------------------------------
	}


	#-------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------
	/* пока не используется
   
   function fiscalcheckCancel($Invoice, $Positions, $moneyType = 2) {
       
        $this->Summ = 0;
        $sessionId = $this->makeSessionIdCancel($Invoice['ID']);
        
        # Уникальное ИД сессии (генерируется самостоятельно и должно быть уникальным для каждого чека)
        $Query['document']['sessionId'] = $sessionId;
        # Флаг необходимости печати чека
        $Query['document']['print'] = $this->Print;
        $Query['document']['data']['docName'] = 'Бланк строгой отчетности';
        # Тип документа (1. Продажа, 2.Возврат продажи, 4. Покупка, 5. Возврат покупки, 7. Коррекция прихода, 9. Коррекция расхода)
        $Query['document']['data']['type'] = 2;
        # ТИП ОПЛАТЫ (1. Наличным, 2. Электронными, 3. Предоплата, 4. Постоплата, 5. Встречное предоставление)
        $Query['document']['data']['moneyType'] = $moneyType;
        # Сумма закрытия чека (может быть 0, если без сдачи) в копейках
        $Query['document']['data']['sum'] = $Invoice['Summ']*100;
        $Query['document']['result'] = 0;
        
        # тег отмены. Берём данные ФПД из ранее выписанного чека
        if(file_exists('/tmp/'.$Invoice['ID'].'-export-fs-answer.txt')) {
            $jsonFiscalCheck = Json_Decode(file_get_contents('/tmp/'.$Invoice['ID'].'-export-fs-answer.txt'), true);
            $result = $this->findFiscProps($jsonFiscalCheck, 1077, 0);
            if(count($result)==1) {
                $Query['document']['data']['fiscprops'][] = Array('tag' => 1192, 'value' => $result['0']);
            } else {
                return false;
            }
        } else {
            return false;
        }
        
        
        # применяемая система налогообложения (применяется битовое значение) См. (номер бита - значение)
        # (0 - 1) - ОСН, (1 - 2) - УСН доход, (2 - 4) - УСН доход - расход, (3 - 8) - ЕНВД, (4 - 16) - ЕСН, (5 - 32) - Патент
        $Query['document']['data']['fiscprops'][] = Array('tag' => 1055, 'value' => 2);
        # регистрационный номер ККТ (20 символов, до установленной длины дополняется пробелами справа)
        # Берется из регистрационных данных в ФН. Если передавать в чеке, то чек будет оформлен 
        # только при совпадении переданного РНМ и РНМ, с которым касса зарегистрирована
//        $Query['document']['data']['fiscprops'][] = Array('tag' => 1037, 'value' => str_pad($this->kktStatusDetail['cashboxStatus']['regNumber'], 20, ' ', STR_PAD_RIGHT));
        # сумма по чеку (БСО) электронными 
        # Величина с учетом копеек, печатается в виде числа с фиксированной точкой (2 цифры после точки) в рублях - налоговая 
        # Обязательно передавать только при использовании нескольких типов оплат. Передается в копейках. - касса 
//        $Query['document']['data']['fiscprops'][] = Array('tag' => 1081, 'value' => $Invoice['Summ']);
        # ИНН пользователя
        # Берется из регистрационных данных в ФН. Если передавать в чеке, то чек будет
        # оформлен только при совпадении переданного инн и инн, с которым касса зарегистрирована
//        $Query['document']['data']['fiscprops'][] = Array('tag' => 1018, 'value' => $this->shopINN);
        # признак расчета. 1 - <ПРИХОД>, 3 - <РАСХОД>, 2 - <ВОЗВРАТ ПРИХОДА>, 4 - <ВОЗВРАТ РАСХОДА>
        $Query['document']['data']['fiscprops'][] = Array('tag' => 1054, 'value' => 2);
        # телефон или электронный адрес покупателя
        $Query['document']['data']['fiscprops'][] = Array('tag' => 1008, 'value' => $Invoice['Email']);
        # адрес сайта ФНС
        $Query['document']['data']['fiscprops'][] = Array('tag' => 1060, 'value' => $this->kktStatusDetail['cashboxStatus']['fnsSite']);
        # email отправителя чека
        # Передавать не нужно. Берется из регистрационных данных в ФН.
//        $Query['document']['data']['fiscprops'][] = Array('tag' => 1117, 'value' => $this->kktStatusDetail['cashboxStatus']['email']);
        
        
        # наименование дополнительного реквизита пользователя
        $Data[] = Array('tag' => 1085, 'value' => 'Служба поддержки ');
        # значение дополнительного реквизита пользователя
        $Data[] = Array('tag' => 1086, 'value' => '8 800 ..........');
        # упаковка фискального свойства с тегом 
        # дополнительный реквизит пользователя (тег 1084)
        $Query['document']['data']['fiscprops'][] = $this->makeFiscProp($Data, 1084);
        unset($Data);
        
        
        foreach($Positions as $Position) {
            $Query['document']['data']['fiscprops'][] = $this->makeFiscPropPosition($Position);
        }
        
        
        # проверка, что подсчитанная сумма не превышает реальную более чем на 10%
        file_put_contents('/tmp/'.$Invoice['ID'].'-export-fsc-summ.txt', $this->Summ."\n".$Query['document']['data']['sum']);
        if($this->Summ <= ($Query['document']['data']['sum']*1.1))
		$Query['document']['data']['sum'] = $this->Summ;
        
        
      $Query = Json_Encode($Query, JSON_UNESCAPED_UNICODE);
      
      $Answer = $this->API('/fiscalcheck.json', $Query);
      
      # для логирования на всякий случай
      file_put_contents('/tmp/'.$Invoice['ID'].'-export-fsc-Query.txt', $Query);
      file_put_contents('/tmp/'.$Invoice['ID'].'-export-fsc-answer.txt', Json_Encode($answer, JSON_UNESCAPED_UNICODE));
      
      return $Answer;
   }
   
	*/

	#-------------------------------------------------------------------------------   
	#-------------------------------------------------------------------------------
	// АПИ
	private function API($Url = '',$Post = Array()){
		#-------------------------------------------------------------------------------
		// разбираем URL АПИ
		$ParseUrl = Parse_Url($this->Cpp);
		//Debug(SPrintF('[system/libs/UMKA.php]: ParseUrl = %s',print_r($ParseUrl,true)));
		#-------------------------------------------------------------------------------
		if(!IsSet($ParseUrl['scheme']))
			$ParseUrl['scheme'] = 'http';
		#-------------------------------------------------------------------------------
		$Protocol = (In_Array(StrToLower($ParseUrl['scheme']),Array('ssl','tls','https')))?'ssl':'tcp';
		#-------------------------------------------------------------------------------
		$Address = $ParseUrl['host'];
		#-------------------------------------------------------------------------------
		if(!IsSet($ParseUrl['port'])){
			#-------------------------------------------------------------------------------
			$Port = ($Protocol == 'ssl')?443:80;
			#-------------------------------------------------------------------------------
		}else{
			#-------------------------------------------------------------------------------
			$Port = $ParseUrl['port'];
			#-------------------------------------------------------------------------------
		}
		#-------------------------------------------------------------------------------
		#-------------------------------------------------------------------------------
		$HTTP = Array(
				'Address'	=> $Address,
				'Port'		=> $Port,
				'Host'		=> $Address,
				'Protocol'	=> $Protocol,
				'Basic'		=> SPrintF('%s:%s',$this->Login,$this->Password),
				);
		#-------------------------------------------------------------------------------
		$Result = HTTP_Send($Url,$HTTP,Array(),$Post/*,$Headers*/);
		#-------------------------------------------------------------------------------
		if(Is_Error($Result))
			return ERROR | @Trigger_Error('[API]: не удалось выполнить запрос к серверу');
		#-------------------------------------------------------------------------------
		$Result = Trim($Result['Body']);
		#-------------------------------------------------------------------------------
		$Result = Json_Decode($Result,TRUE);
		#-------------------------------------------------------------------------------
		#-------------------------------------------------------------------------------
		if(Is_Array($Result) && Count($Result)> 0){
			#-------------------------------------------------------------------------------
			return $Result;
			#-------------------------------------------------------------------------------
		}else{
			#-------------------------------------------------------------------------------
			$this->error("API :: $Post");
			#-------------------------------------------------------------------------------
			return false;
			#-------------------------------------------------------------------------------
		}
		#-------------------------------------------------------------------------------
	}
   
   
    # функция рекурсивно ищет в массиве массив в котором есть ключ tag с искомым значением  $tag и возвращает 
    # при $parrent == 0 значение value из найденного массива
    # при $parrent == 1 значение весь найденный массив
    # при $parrent == 2 весь вешестоящий массив, в котором найден искомый массив (с нужным тегом)
    # ввиду того, что некоторые теги в чеке могут быть встречены ни один раз, найденные результаты помещаются в массив с числовыми ключами (от ноля и далее)   
    function findFiscProps($Data, $tag, $parrent=0) {  
    	$result = Array();
        
        if(Is_Array($Data)) foreach ($Data as $key=>$value) {
     	      if(isset($value['tag']) && $value['tag'] == $tag) {
                  if($parrent==2) $result = Array_merge($result, Array($Data));
                  elseif($parrent==1) $result = Array_merge($result, Array($value));
                  else $result = Array_merge($result, Array($value['value']));
              } else {
                  $tmp = $this->findFiscProps($value, $tag, $parrent);
                  if(count($tmp)>0) $result = Array_merge($result, $tmp);
              }
        }
        return $result;
    } 
    
    
   
   function error($info) {
       
       return;
   }
   
 

}
 
