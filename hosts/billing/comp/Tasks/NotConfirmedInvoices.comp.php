<?php

#-------------------------------------------------------------------------------
/** @author Великодный В.В. (Joonte Ltd.) */
/******************************************************************************/
/******************************************************************************/
Eval(COMP_INIT);
/******************************************************************************/
/******************************************************************************/
$Config = Config();
#-------------------------------------------------------------------------------
$Settings = $Config['Tasks']['Types']['NotConfirmedInvoices'];
#-------------------------------------------------------------------------------
$ExecuteTime = Comp_Load('Formats/Task/ExecuteTime',Array('ExecutePeriod'=>$Settings['ExecutePeriod']));
if(Is_Error($ExecuteTime))
	return ERROR | @Trigger_Error(500);
#-------------------------------------------------------------------------------
if(!$Settings['IsActive'])
	return 3600;
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
$Invoices = DB_Select('InvoicesOwners',Array('ID','UserID','StatusID','(SELECT LENGTH(`ConfirmedWas`) FROM `Users` WHERE `ID` = `InvoicesOwners`.`UserID`) AS `Confirmed`'),Array('Where'=>Array('`StatusID` = "NotConfirmed"')));
#-------------------------------------------------------------------------------
switch(ValueOf($Invoices)){
case 'error':
	return ERROR | @Trigger_Error(500);
case 'exception':
	return $ExecuteTime;
case 'array':
	#-------------------------------------------------------------------------------
	$GLOBALS['TaskReturnInfo'] = Array('Confirmed'=>Array(),'NotConfirmed'=>Array());
	#-------------------------------------------------------------------------------
	foreach($Invoices as $Invoice){
		#-----------------------------------------------------------------------------
		$Number = Comp_Load('Formats/Invoice/Number',$Invoice['ID']);
		if(Is_Error($Number))
			return ERROR | @Trigger_Error(500);
		#-------------------------------------------------------------------------------
		#-------------------------------------------------------------------------------
		if(IntVal($Invoice['Confirmed']) < 6){
			#-------------------------------------------------------------------------------
			Debug(SPrintF('[comp/Tasks/NotConfirmedInvoices]: Счёт #%s пропущен, пользователь не подтверждён',$Number));
			#-------------------------------------------------------------------------------
			$GLOBALS['TaskReturnInfo']['NotConfirmed'][] = $Number;
			#-------------------------------------------------------------------------------
			#-------------------------------------------------------------------------------
			/* вставка. если три часа ночи, оповещаем юзеров, один раз. */
			if(Date('G') != 3)
				continue;
			#-------------------------------------------------------------------------------
			$CacheID = SPrintF('NotConfirmedInvoices_%s',$Number);
			#-------------------------------------------------------------------------------
			$Result = CacheManager::get($CacheID);
			#-------------------------------------------------------------------------------
			if($Result)
				continue;
			#-------------------------------------------------------------------------------
			$IsSend = NotificationManager::sendMsg(new Message('NotConfirmedInvoices',(integer)$Invoice['UserID'],Array('Theme'=>SPrintF('Неподтверждённый счёт #%d',$Invoice['ID']),'InvoiceID'=>$Invoice['ID'])));
			#-------------------------------------------------------------------------------
			switch(ValueOf($IsSend)){
			case 'true':
				#-------------------------------------------------------------------------------
				$Event = Array(
						'UserID'	=> $Invoice['UserID'],
						'PriorityID'	=> 'Billing',
						'Text'		=> SPrintF('Уведомление о неподтверждённом счёте #%d',$Invoice['ID'])
						);
				$Event = Comp_Load('Events/EventInsert',$Event);
				#-------------------------------------------------------------------------------
				if(!$Event)
					return ERROR | @Trigger_Error(500);
				#-------------------------------------------------------------------------------
				break;
				#-------------------------------------------------------------------------------
			case 'exception':
				#-------------------------------------------------------------------------
				$Event = Array(
						'UserID'	=> $Invoice['UserID'],
						'PriorityID'	=> 'Billing',
						'Text'		=> SPrintF('Уведомление о неоплаченном счёте #%d не доставлено. Не удалось оповестить пользователя ни одним из методов.',$Invoice['ID'])
						);
				#-------------------------------------------------------------------------------
				$Event = Comp_Load('Events/EventInsert',$Event);
				if(!$Event)
					return ERROR | @Trigger_Error(500);
				#-------------------------------------------------------------------------------
				break;
				#-------------------------------------------------------------------------------
			default:
				return ERROR | @Trigger_Error(500);
			}
			#-------------------------------------------------------------------------------
			// кэшируем на час, что уведомление о этом счёте отправлено юзеру
			CacheManager::add($CacheID,Time(),3600);
			#-------------------------------------------------------------------------------
		}else{
			#-------------------------------------------------------------------------------
			$Comp = Comp_Load('www/API/StatusSet',Array('ModeID'=>'Invoices','StatusID'=>'Payed','RowsIDs'=>$Invoice['ID'],'Comment'=>'Пользователь подтверждён'));
			#-------------------------------------------------------------------------------
			switch(ValueOf($Comp)){
			case 'error':
				return ERROR | @Trigger_Error(500);
			case 'exception':
				return ERROR | @Trigger_Error(400);
			case 'array':
				break;
			default:
				return ERROR | @Trigger_Error(101);
			}
			#-------------------------------------------------------------------------------
			$GLOBALS['TaskReturnInfo']['Confirmed'][] = $Number;
			#-------------------------------------------------------------------------------
		}
		#-------------------------------------------------------------------------------
	}
	#-------------------------------------------------------------------------------
	break;
	#-------------------------------------------------------------------------------
default:                                                
	return ERROR | @Trigger_Error(101);             
}
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
return $ExecuteTime;
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

?>
