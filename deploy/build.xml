<?xml version="1.0" encoding="UTF-8"?>

<project name="Joonte Billing System" description="Deploy of JBS" default="deploy" >
    <property name="versionPrefix" value="v" />
    <property name="version" value="2.6.15" />
    <property name="versionPostfix" value="-release" />

    <property name="tmpDir" value="/tmp/joonte" />
    <property name="releaseName" value="joonte-${versionPrefix}${version}" />
    <property name="releasePath" value="${tmpDir}/${releaseName}" />

    <property name="releaseServer" value="www.joonte.com" />
    <property name="releaseDownloadPath" value="/home/joonte/data/www/joonte.com/public" />
    <property name="releaseServerPath" value="/work/releases/jbs" />

    <property name="joonteDir" value="/home/joonte/data/www/joonte.com" />
    <!--<property name="joonteDir" value="/home/joonte/data/jbs_" />-->


    <property name="projectName" value="joonte" />
    <property name="projectDir" value="/home/joonte/data/www/joonte.com" />
    <property name="projectHosts" value="billing,hosting,joonte,license,root" />

    <patternset id="jbs-common-files" description="Common billing hosts.">
        <include name="core/**" />
        <include name="install/**" />
        <include name="*/billing/**" />
        <include name="*/hosting/**" />
        <include name="*/root/**" />
        <include name="HostsIDs.txt" />
	<include name=".htaccess" />
        <include name="hosts/.htaccess" />
        <include name="index.php" />
    </patternset>

    <patternset id="joonte-files" description="Joonte site billing hosts.">
        <include name="*/joonte/**" />
        <include name="*/license/**" />
    </patternset>

    <!-- ============================================  -->
    <!-- Target: update from repo                      -->
    <!-- ============================================  -->

    <target name="clean">
        <available file="${releasePath}" type="dir" property="release-path-exists" />
        <if>
         <equals arg1="${release-path-exists}" arg2="true" />
         <then>
           <delete dir="${releasePath}" includeemptydirs="true" failonerror="true" />
         </then>
        </if>

        <available file="${tmpDir}/${releaseName}.zip" property="release-file-exists" />
        <if>
         <equals arg1="${release-file-exists}" arg2="true" />
         <then>
           <delete file="${tmpDir}/${releaseName}.zip" />
         </then>
        </if>
    </target>

    <target name="copy-jbs-files" depends="clean">
        <mkdir dir="${releasePath}" description="Create release path." />

        <exec command="date +%Y" outputproperty="currentYear"/>

        <copy todir="${releasePath}" description="Copy release files to release path.">
            <filterchain description="Replace tokens.">
                <replacetokens begintoken="##" endtoken="##">
                    <token key="CURR_YEAR" value="${currentYear}" />
                    <token key="VERSION" value="${versionPrefix}${version}" />
                </replacetokens>
            </filterchain>

            <fileset dir="..">
                <patternset refid="jbs-common-files" />
            </fileset>
        </copy>
        <touch file="${releasePath}/INSTALL" />
    </target>

    <!--
        Publish project to server.
    -->
    <target name="publish-release">
        <echo msg="Publish release to server ${releaseServer}:${releaseServerPath}" />

        <!-- Publish. -->
        <echo msg="rsync -rc --delete --exclude='.LastPatchFiles' --exclude='HostsIDs.txt' ${releasePath}/* root@${releaseServer}:${releaseServerPath}" />
        <exec command="rsync -rc --delete --exclude='.LastPatchFiles' --exclude='HostsIDs.txt' ${releasePath}/* root@${releaseServer}:${releaseServerPath}" dir="${tmpDir}" escape="false" checkreturn="true" outputProperty="out" />
        <echo msg="${out}"/>

        <echo msg="rsync -c ${releasePath}/.htaccess joonte@${releaseServer}:${releaseServerPath}" />
        <exec command="rsync -c ${releasePath}/.htaccess root@${releaseServer}:${releaseServerPath}" checkreturn="true" outputProperty="out" />
        <echo msg="${out}"/>

        <echo msg="rsync -c ${releasePath}/hosts/.htaccess joonte@${releaseServer}:${releaseServerPath}/hosts" />
        <exec command="rsync -c ${releasePath}/hosts/.htaccess root@${releaseServer}:${releaseServerPath}/hosts" checkreturn="true" outputProperty="out" />
        <echo msg="${out}"/>

        <echo msg="Project release has been published." />
    </target>

    <target name="copy-project-files" depends="clean">
        <mkdir dir="${releasePath}" description="Create release path." />

        <exec command="date +%Y" outputproperty="currentYear"/>

        <copy todir="${releasePath}" description="Copy release files to release path.">
            <filterchain description="Replace tokens.">
                <replacetokens begintoken="##" endtoken="##">
                    <token key="CURR_YEAR" value="${currentYear}" />
                    <token key="VERSION" value="${versionPrefix}${version}" />
                </replacetokens>
            </filterchain>

            <fileset dir="..">
                <patternset refid="jbs-common-files" />
                <patternset refid="${projectName}-files" />
            </fileset>
        </copy>
    </target>

    <!--
        Creates ZIP release archive to publish.
    -->
    <target name="create-archive">
        <echo msg="Creating release archive." />
        <zip basedir="${releasePath}" destfile="${tmpDir}/${releaseName}.zip" />
        <echo msg="Release archive has been created." />
    </target>

    <!--
        Publish release archive to download directory.
    -->
    <target name="publish-release-archive">
        <echo msg="Publish release ${releaseName}.zip to server ${releaseServer}:${releaseDownloadPath}" />
        <exec command="scp ${releaseName}.zip joonte@${releaseServer}:${releaseDownloadPath}" dir="${tmpDir}" escape="false" />
        <echo msg="Release has been published." />
    </target>

    <target name="create-version-info-file">
        <append destFile="${releasePath}/version" file="./version">
            <filterchain description="Replace tokens.">
                <replacetokens begintoken="##" endtoken="##">
                    <token key="VERSION" value="${versionPrefix}${version}" />
                </replacetokens>
            </filterchain>
        </append>

        <echo msg="Publish version file to server ${releaseServer}:${releaseDownloadPath}" />
        <exec command="scp version joonte@${releaseServer}:${releaseDownloadPath}" dir="${releasePath}" escape="false" outputproperty="out" />
        <echo msg="${out}"/>
    </target>

    <!--
        Publish project hosts to server.
    -->
    <target name="publish-project-hosts">
        <echo msg="rsync -rc --delete --exclude='.LastPatchFiles' ${releasePath}/hosts/${host} joonte@${releaseServer}:${projectDir}/hosts" />
        <exec command="rsync -rcv --delete --exclude='.LastPatchFiles' ${releasePath}/hosts/${host} joonte@${releaseServer}:${projectDir}/hosts" dir="${tmpDir}" escape="false" checkreturn="true" outputProperty="out" />
        <echo msg="${out}"/>
    </target>

    <!--
        Publish project to server.
    -->
    <target name="publish-project">
        <echo msg="Publish ${projectName} to server ${releaseServer}:${projectDir}" />

        <!-- Publish hosts. -->
        <foreach param="host" list="${projectHosts}" target="publish-project-hosts" />

        <!-- Publish others. -->
        <echo msg="rsync -rcv --delete --exclude='.LastPatchFiles' --exclude='hosts' ${releasePath}/* joonte@${releaseServer}:${projectDir}" />
        <exec command="rsync -rc --delete --exclude='.LastPatchFiles' --exclude='hosts' ${releasePath}/* joonte@${releaseServer}:${projectDir}" dir="${tmpDir}" escape="false" checkreturn="true" outputProperty="out" />
        <echo msg="${out}"/>

        <echo msg="rsync -c ${releasePath}/.htaccess joonte@${releaseServer}:${projectDir}" />
        <exec command="rsync -c ${releasePath}/.htaccess joonte@${releaseServer}:${projectDir}" checkreturn="true" outputProperty="out" />
        <echo msg="${out}"/>

        <echo msg="Project ${projectName} has been published." />
    </target>

    <!-- ============================================  -->
    <!-- Target: deploy xI1Qa2br                               -->
    <!-- ============================================  -->
    <target name="deploy" depends="copy-jbs-files,publish-release,create-archive,publish-release-archive,create-version-info-file">
        <echo msg="Project has been successfully deployed." />
    </target>

    <!--
        Deploy project.
    -->
    <target name="project-deploy" depends="copy-project-files,publish-project">
        <echo msg="Project ${projectName} has been successfully deployed." />
    </target>
</project>
